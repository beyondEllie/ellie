package actions

import (
	"fmt"

	"github.com/tacheraSasi/ellie/styles"
)

func ShowHelp() {
	styles.GetHeaderStyle().Println("Ellie CLI - AI-Powered System Management Tool")
	styles.GetInfoStyle().Println("Usage: ellie [--help] [--version] <command> [arguments]")

	styles.GetHeaderStyle().Println("Global Flags:")
	styles.GetInfoStyle().Println("  --help\tShow this help message")
	styles.GetInfoStyle().Println("  --version\tShow version information")

	styles.GetHeaderStyle().Println("Core Commands:")
	fmt.Println("  config \t\tConfigure Ellie CLI")
	fmt.Println("  reset-config\t\tReset Ellie CLI configuration")
	fmt.Println("  whoami\t\tShow current user")
	fmt.Println("  dev-init [--all]\tInitialize development environment (optionally install all tools)")
	fmt.Println("  greet\t\t\tGreet the user")
	fmt.Println("  send-mail\t\tSend an email")
	fmt.Println("  focus\t\t\tActivate focus mode")
	fmt.Println("  review <filename/path>\tReview code or files using LLMs")
	fmt.Println("  md <filename>\t\tRender markdown files in terminal")
	fmt.Println("  run <command>\t\tExecute system commands")
	fmt.Println("  pwd\t\t\tPrint working directory")
	fmt.Println("  open-explorer\t\tOpen the current dir in file explorer")
	fmt.Println("  open <path>\t\tOpen file explorer at path")
	fmt.Println("  play <media>\t\tPlay media files")
	fmt.Println("  setup-git\t\tConfigure Git credentials")
	fmt.Println("  sysinfo\t\tShow system information")
	fmt.Println("  install <package>\tInstall software packages")
	fmt.Println("  update\t\tUpdate system packages")
	fmt.Println("  list <dir>\t\tList directory contents")
	fmt.Println("  create-file <path>\tCreate new files")
	fmt.Println("  network-status\tShow network information")
	fmt.Println("  connect-wifi <SSID> <password>\tConnect to WiFi network")
	fmt.Println("  chat\t\t\tStart interactive AI chat session")
	fmt.Println("  history\t\tShow recent commands")
	fmt.Println("  start-day\t\tStart your dev day (apps, services, git)")
	fmt.Println("  weather\t\tShow weather info")
	fmt.Println("  joke\t\t\tTell a joke")
	fmt.Println("  remind\t\t\tSet a reminder")
	fmt.Println("  about\t\t\tShow about info")

	styles.GetHeaderStyle().Println("Git Commands:")
	fmt.Println("  git status\t\tShow Git status")
	fmt.Println("  git push\t\tPush commits")
	fmt.Println("  git commit\t\tCreate Conventional Commit")
	fmt.Println("  git pull\t\tPull latest changes")
	fmt.Println("  git branch-create\tCreate a new branch")
	fmt.Println("  git branch-switch\tSwitch to an existing branch")
	fmt.Println("  git branch-delete\tDelete a branch")
	fmt.Println("  git stash-save\tSave changes to a new stash")
	fmt.Println("  git stash-pop\tApply the latest stash")
	fmt.Println("  git stash-list\tList all stashes")
	fmt.Println("  git tag-create\tCreate a new tag")
	fmt.Println("  git tag-list\tList all tags")
	fmt.Println("  git tag-delete\tDelete a tag")
	fmt.Println("  git log\t\tShow pretty git log")
	fmt.Println("  git diff\t\tShow git diff")
	fmt.Println("  git merge\t\tMerge a branch into the current branch")
	fmt.Println("  git rebase\t\tRebase current branch onto another")
	fmt.Println("  git cherry-pick\tCherry-pick a commit")
	fmt.Println("  git reset\t\tReset current branch to a commit")
	fmt.Println("  git bisect\t\tStart a bisect session")
	fmt.Println("  git bisect-good\tMark current commit as good in bisect")
	fmt.Println("  git bisect-bad\tMark current commit as bad in bisect")
	fmt.Println("  git bisect-reset\tEnd the bisect session")

	styles.GetHeaderStyle().Println("Service Management:")
	fmt.Println("  start <apache|mysql|postgres|all>\tStart services")
	fmt.Println("  stop <apache|mysql|postgres|all>\tStop services")
	fmt.Println("  restart <apache|mysql|postgres|all>\tRestart services")
	fmt.Println("  start list\t\tList available services")
	fmt.Println("  stop list\t\tList available services")
	fmt.Println("  restart list\t\tList available services")

	styles.GetHeaderStyle().Println("Alias Management:")
	fmt.Println("  alias add <name>=\"<command>\"\tAdd a new alias")
	fmt.Println("  alias list\t\tList all aliases")
	fmt.Println("  alias delete <name>\tDelete an alias")

	styles.GetHeaderStyle().Println("Todo Management:")
	fmt.Println("  todo add \"<task>\" [category] [priority]\tAdd a new todo")
	fmt.Println("  todo list\t\tList all todos")
	fmt.Println("  todo complete <id>\tMark todo as complete")
	fmt.Println("  todo delete <id>\tDelete a todo")
	fmt.Println("  todo edit <id> <field> <value>\tEdit a todo field")

	styles.GetHeaderStyle().Println("Project Management:")
	fmt.Println("  project add <name> <path> [description] [tags...]\tAdd a new project")
	fmt.Println("  project list\t\tList all projects")
	fmt.Println("  project delete <name>\tDelete a project")
	fmt.Println("  project search <query>\tSearch projects")
	fmt.Println("  switch <project-name>\tSwitch to a project")

	styles.GetHeaderStyle().Println("Day Start Configuration:")
	fmt.Println("  day-start add <type> <value>\tAdd to daily setup (apps/services/git_repos)")
	fmt.Println("  day-start list\t\tList daily setup configuration")

	styles.GetHeaderStyle().Println("Theme Management:")
	fmt.Println("  theme set <light|dark|auto>\tSet the theme mode")
	fmt.Println("  theme show\t\tShow current theme")

	styles.DimText.Println("For detailed command help, use 'ellie <command> --help'")
}
